// <auto-generated />
using System;
using CustomerManagement.Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CustomerManagement.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250501112826_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CustomerManagement.Core.Entities.Appraisal", b =>
                {
                    b.Property<int>("AppraisalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppraisalId"));

                    b.Property<decimal?>("Achievement")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignTo")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EmployeeScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool?>("IsLatest")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLock")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ManagerScore")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("AppraisalId");

                    b.ToTable("Appraisals");
                });

            modelBuilder.Entity("CustomerManagement.Core.Entities.AppraisalHistory", b =>
                {
                    b.Property<int>("AppraisalHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppraisalHistoryId"));

                    b.Property<decimal?>("Achievement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionId")
                        .HasColumnType("int");

                    b.Property<int>("AppraisalId")
                        .HasColumnType("int");

                    b.Property<int?>("AssignBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignTo")
                        .HasColumnType("int");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EmployeeScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsLatest")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLock")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ManagerScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AppraisalHistoryId");

                    b.ToTable("AppraisalHistories");
                });

            modelBuilder.Entity("CustomerManagement.Core.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "Address1",
                            Email = "email1@gmail.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "0547762054"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "Address2",
                            Email = "email2@gmail.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "0547762067"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "Address3",
                            Email = "email3@gmail.com",
                            FirstName = "Leanne",
                            LastName = "Graham",
                            Phone = "0547762025"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "Address4",
                            Email = "email4@gmail.com",
                            FirstName = "Dennis",
                            LastName = "Schulist",
                            Phone = "0547762054"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "Address5",
                            Email = "email5@gmail.com",
                            FirstName = "Glenna",
                            LastName = "Reichert",
                            Phone = "0547762079"
                        },
                        new
                        {
                            CustomerId = 6,
                            Address = "Address6",
                            Email = "email6@gmail.com",
                            FirstName = "Ervin",
                            LastName = "Howell",
                            Phone = "0547762124"
                        });
                });

            modelBuilder.Entity("CustomerManagement.Core.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            EmployeeName = "Employee 1",
                            ManagerId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            EmployeeId = 2,
                            EmployeeName = "Manager 1",
                            ManagerId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            EmployeeId = 3,
                            EmployeeName = "HR 1",
                            ManagerId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            EmployeeId = 4,
                            EmployeeName = "HR Manager 1",
                            ManagerId = 0,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("CustomerManagement.Core.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Employee"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("CustomerManagement.Core.Entities.TaskAction", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ActionStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FormType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ActionId");

                    b.ToTable("TaskActions");

                    b.HasData(
                        new
                        {
                            ActionId = 1,
                            ActionCode = "Phase_1_Emp_New",
                            ActionName = "Performance Appraisal has been initialized",
                            ActionStatus = "New",
                            ActionType = "Employee",
                            FormType = "FormPhase1",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 2,
                            ActionCode = "Phase_1_Emp_ToMng_Assign",
                            ActionName = "Employee submits Performance Objection to Line Manager with Title, Message, and Weight %",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase1",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 3,
                            ActionCode = "Phase_1_Mng_FromEmp_New",
                            ActionName = "Line Manager receives Performance Objection from Employee with Title, Message, and Weight %",
                            ActionStatus = "In Process",
                            ActionType = "Manager",
                            FormType = "FormPhase1",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 4,
                            ActionCode = "Phase_1_Mng_ToEmp_Reject",
                            ActionName = "Line Manager: Rejects Performance Objection and returns it to Employee with comments",
                            ActionStatus = "Reject",
                            ActionType = "Manager",
                            FormType = "FormPhase1",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 5,
                            ActionCode = "Phase_1_Mng_ToEmp_Approve",
                            ActionName = "Line Manager: Approves Performance Objection and forwards it to Employee to begin Phase 2",
                            ActionStatus = "Approve",
                            ActionType = "Manager",
                            FormType = "FormPhase1",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 6,
                            ActionCode = "Phase_2_Emp_FromMng_New",
                            ActionName = "Employee receives Phase 1 approval from Line Manager and proceeds to Phase 2",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase2",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 7,
                            ActionCode = "Phase_2_Emp_ToMng_Assign",
                            ActionName = "Employee submits Achievement % to Line Manager",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase2",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 8,
                            ActionCode = "Phase_2_Mng_FromEmp_New",
                            ActionName = "Line Manager receives Achievement % from Employee",
                            ActionStatus = "In Process",
                            ActionType = "Manager",
                            FormType = "FormPhase2",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 9,
                            ActionCode = "Phase_2_Mng_ToEmp_Reject",
                            ActionName = "Line Manager: Rejects Employee Achievement and returns it with comments",
                            ActionStatus = "Reject",
                            ActionType = "Manager",
                            FormType = "FormPhase2",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 10,
                            ActionCode = "Phase_2_Mng_ToEmp_Approve",
                            ActionName = "Line Manager: Approves Employee Achievement and forwards it to Employee to begin Phase 3",
                            ActionStatus = "Approve",
                            ActionType = "Manager",
                            FormType = "FormPhase2",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 11,
                            ActionCode = "Phase_3_Emp_FromMng_New",
                            ActionName = "Employee receives Phase 2 approval from Line Manager and proceeds to Phase 3",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase3",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 12,
                            ActionCode = "Phase_3_Emp_ToMng_Assign",
                            ActionName = "Employee submits Score % to Line Manager",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase3",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 13,
                            ActionCode = "Phase_3_Mng_FromEmp_New",
                            ActionName = "Line Manager receives Score % from Employee",
                            ActionStatus = "In Process",
                            ActionType = "Manager",
                            FormType = "FormPhase3",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 14,
                            ActionCode = "Phase_3_Mng_ToEmp_Reject",
                            ActionName = "Line Manager: Rejects Employee Score and returns it with comments",
                            ActionStatus = "Reject",
                            ActionType = "Manager",
                            FormType = "FormPhase3",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 15,
                            ActionCode = "Phase_3_Mng_ToHR_Approve",
                            ActionName = "Line Manager: Approves Employee Score and forwards it to HR to begin Phase 4",
                            ActionStatus = "Approve",
                            ActionType = "Manager",
                            FormType = "FormPhase3",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 16,
                            ActionCode = "Phase_4_HR_FromMng_New",
                            ActionName = "HR receives Phase 3 approval and proceeds to Phase 4",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase4",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 17,
                            ActionCode = "Phase_4_HR_ToHRMng_Assign",
                            ActionName = "HR submits comments to HR Manager",
                            ActionStatus = "In Process",
                            ActionType = "Employee",
                            FormType = "FormPhase4",
                            RoleId = 1
                        },
                        new
                        {
                            ActionId = 18,
                            ActionCode = "Phase_4_HRMng_FromHR_New",
                            ActionName = "HR Manager receives comments from HR",
                            ActionStatus = "In Process",
                            ActionType = "Manager",
                            FormType = "FormPhase4",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 19,
                            ActionCode = "Phase_4_HRMng_ToHR_Reject",
                            ActionName = "HR Manager: Rejects and returns to HR with comments",
                            ActionStatus = "Reject",
                            ActionType = "Manager",
                            FormType = "FormPhase4",
                            RoleId = 2
                        },
                        new
                        {
                            ActionId = 20,
                            ActionCode = "Phase_4_HRMng_Close",
                            ActionName = "HR Manager: Approves and closes the Appraisal",
                            ActionStatus = "Close",
                            ActionType = "Manager",
                            FormType = "FormPhase4",
                            RoleId = 2
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
